load("@bazel_tools//tools/build_defs/pkg:pkg.bzl", "pkg_tar")

_G3LOG_SRCS = [
    "crashhandler_unix.cpp",
    #"crashhandler_windows.cpp",
    "filesink.cpp",
    "filesinkhelper.ipp",
    "g3log.cpp",
    "logcapture.cpp",
    "loglevels.cpp",
    "logmessage.cpp",
    "logworker.cpp",
    #"stacktrace_windows.cpp",
    "time.cpp",
]

_G3LOG_HDRS = [
    "active.hpp",
    "atomicbool.hpp",
    "crashhandler.hpp",
    "filesink.hpp",
    "future.hpp",
    "g3log.hpp",
    "logcapture.hpp",
    "loglevels.hpp",
    "logmessage.hpp",
    "logworker.hpp",
    "moveoncopy.hpp",
    "shared_queue.hpp",
    "sink.hpp",
    "sinkhandle.hpp",
    "sinkwrapper.hpp",
    #"stacktrace_windows.hpp",
    "stlpatch_future.hpp",
    "time.hpp",
]

cc_library(
    name = "g3log",
    linkstatic = False,
    srcs = [
        "src/{}".format(f)
        for f in _G3LOG_SRCS
    ] + [":generated_definitions_hpp"],
    hdrs = [
        "src/g3log/{}".format(f)
        for f in _G3LOG_HDRS
    ],
    copts = ["-std=c++17"],
    # To make the function names available to the program
    # https://www.gnu.org/software/libc/manual/html_node/Backtraces.html
    linkopts = ["-rdynamic"],
    includes = ["src"],
    visibility = ["//visibility:public"],
)

genrule(
    name = "generated_definitions_hpp",
    outs = [
        "src/g3log/generated_definitions.hpp",
    ],
    cmd = """cat > $@ << EOL
// AUTO GENERATED MACRO DEFINITIONS FOR G3LOG


/** ==========================================================================
* 2015 by KjellKod.cc. This is PUBLIC DOMAIN to use at your own risk and comes
* with no warranties. This code is yours to share, use and modify with no
* strings attached and no restrictions or obligations.
*
* For more information see g3log/LICENSE or refer refer to http://unlicense.org
* ============================================================================*/

#pragma once


// CMake induced definitions below. See g3log/Options.cmake for details.


#define G3_DYNAMIC_LOGGING

#define G3LOG_DEBUG DEBUG

//#define G3_DYNAMIC_MAX_MESSAGE_SIZE

//#define G3_LOG_FULL_FILENAME

//#define DISABLE_FATAL_SIGNALHANDLING
EOL
""",
    visibility = ["//visibility:private"],
)

cc_binary(
    name = "g3log-FATAL-contract",
    linkstatic = False,
    srcs = glob([
        "example/main_contract.cpp",
    ]),
    deps = [
        ":g3log",
    ],
    visibility = ["//visibility:private"],
)

cc_binary(
    name = "g3log-FATAL-choice",
    linkstatic = False,
    srcs = glob([
        "example/main_fatal_choice.cpp",
    ]),
    deps = [
        ":g3log",
    ],
    visibility = ["//visibility:private"],
)

cc_binary(
    name = "g3log-FATAL-sigsegv",
    linkstatic = False,
    srcs = glob([
        "example/main_sigsegv.cpp",
    ]),
    deps = [
        ":g3log",
    ],
    visibility = ["//visibility:private"],
)

pkg_tar(
    name = "libg3log",
    srcs = [
        ":g3log",
    ],
    extension = "tar.gz",
    package_dir = "/usr/lib",
    mode = "0644",
    visibility = ["//visibility:public"],
)

pkg_tar(
    name = "g3log-examples",
    srcs = [
        ":g3log-FATAL-contract",
        ":g3log-FATAL-choice",
        ":g3log-FATAL-sigsegv",
    ],
    extension = "tar.gz",
    include_runfiles = True,
    mode = "0755",
    strip_prefix = ".",
    visibility = ["//visibility:public"],
)
